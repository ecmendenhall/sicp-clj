;; Exercise 1.10

(defn a [x y]
  (cond (= y 0) 0
        (= x 0) (* 2 y)
        (= y 1) 2
        :else (a (- x 1)
                 (a x (- y 1)))))

(a 1 10)
;; 1024
(cond (= 10 0) 0
      (=  1 0) (* 2 10)
      (= 10 1) 2
      :else (a (- 1 1)
               (a 1 (- 10 1))))

(a (- 1 1) (a 1 (- 10 1)))

(a (- 1 1) (a 1 9))

(a (- 1 1) (cond (= 9 0) 0
                 (= 1 0) (* 2 9)
                 (= 9 1) 2
                 :else (a (- 1 1)
                       (a 1 (- 9 1)))))

(a (- 1 1) (a (- 1 1) (a 1 (- 9 1))))

(a (- 1 1) (a (- 1 1) (a 1 8)))

(a (- 1 1) 
   (a (- 1 1)
      (a (- 1 1) 
         (a 1 7))))

(a (- 1 1) 
   (a (- 1 1) 
      (a (- 1 1) 
         (a (- 1 1) 
            (a 1 6)))))
;; [...]

(a (- 1 1)
   (a (- 1 1)
      (a (- 1 1)
         (a (- 1 1)
            (a (- 1 1)
               (a (- 1 1)
                  (a (- 1 1)
                     (a (- 1 1)
                        (a (- 1 1)
                           (a 1 1))))))))))

(a (- 1 1)
   (a (- 1 1)
      (a (- 1 1)
         (a (- 1 1)
            (a (- 1 1)
               (a (- 1 1)
                  (a (- 1 1)
                     (a (- 1 1)
                        (a (- 1 1) 2)))))))))

(a (- 1 1)
   (a (- 1 1)
      (a (- 1 1)
         (a (- 1 1)
            (a (- 1 1)
               (a (- 1 1)
                  (a (- 1 1)
                     (a (- 1 1)
                        (a 0 2)))))))))

(a (- 1 1) 
   (a (- 1 1) 
      (a (- 1 1)  
         (a (- 1 1) 
            (a (- 1 1) 
               (a (- 1 1) 
                  (a (- 1 1) 
                     (a 0 4))))))))

;; [...]

(a (- 1 1)
   (a (- 1 1)
      (a 0 128)))

(a (- 1 1)
   (a 0 256))

(a 0 512)

1024
;; = 2^10
